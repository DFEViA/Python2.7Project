27 使用XML-RPC进行文件共享
本章介绍如何编写一个简单的文件共享程序。

因为XML-RPC协议的实现总是伴随着一定的开销。不过XML-RPC非常易用，而且会让代码大大简化。

27.1 问题
本章要创建的是一个P2P的文件共享程序。文件共享基本上意味着通过运行在不同计算机上的程序交换文件。
去中心化网络

在P2P交互内，任何节点（peer）都可以连接到其他节点。在这样一个由节点组成的（虚拟）网络中，是没有中央节点的（也就是C/S架构中的服务器所表现的），这样网络会更强壮。除非大多数节点管理，否则网络是不会崩溃的。

下面是文件共享程序必须满足的需求。
1、每个节点必须追踪已知的可以寻求帮助的节点的信息。节点必须可以讲自己“介绍”给其他的节点（这样就可以包括在节点集合内）。
2、必须可以向节点请求文件（提供文件名）。如果节点拥有这个文件，那么将其返回；否则它应该改轮流询问自己的各个邻节点，请求相同的文件（之后这些邻接点又会轮流请求自己的邻接点）。如果其中的某个节点拥有文件，那马就返回该文件。
3、为了避免循环（A请求B，B又请求A）以及邻节点间非常场的请求链（A请求B请求C......再请求Z），程序必学在请求节点的时候提供请求历史记录。这个历史记录只是一个列表，其中包括到这个节点为止已经参与这次请求的节点。通过请求历史中不存在的节点就可以避免循环，限制历史记录的长度，即可避免过长的请求链。
4、程序必学有连接到节点并且将自己表示为可信任产于和的方法。这样就获得了对于不信任的参与者（比如在P2P网络内的其他节点）不可用的访问功能。这些功能可能包括要求节点（通过查询请求）从网络中的其他节点处下载并且存储文件。
5、必须提供用户界面，让用户可以连接节点（作为可信任参与者）并下载文件。它应该很容易扩展并且替换界面也不难

27.2 有用的工具

27.3 准备工作

27.4 初次实现
编写Node类（系统中的一个节点或点）的第一个原型
SimpleXMLRPCServer,它使用（服务器，端口）形式的元组进行实例化。

27.4.1 实现一个简单的节点
Node要维护什么信息（特性），它又必须执行什么操作（方法）？
Node必须至少具有下面的特性：
1、目录名，这样它就知道在哪里查找、保存文件。
2、其他的节点应该有“密语”（或者密码）以让其他节点验证身份（作为可信任参与者）。
3、已知节点（URL）的集合。
4、URL可以添加到请求历史中，或者可以提供给其他Node（本章内不会实现后一个功能）。

27.5 再次实现
需要改进的地方
1、如果视图停止并重启一个Node的话，可能会得到端口已经在使用的错误信息；#解决方案，将自己的allow_reuse_address特性设定为True即可
2、应该使用更加人性化的界面，而不是用交互式Python解释器中xmlrpcc.client;
3、返回的状态吗很不方便——更加自然而且Python化的方案是在无法找到文件的时候使用自定义异常。
4、Node不会检查它所返回的文件是否在文件目录中。使用'../somesecretfile.txt'这样的路径，图谋不轨的很渴就可以非法访问你的其他文件；

27.5.1 创建客户端界面
客户端界面使用cmd模块的Cmd类实现。有关这个类的工作方式的细节，请参见Python库参考。
可以继承Cmd来创建命令行界面，然后对所有想处理的命令foo实现do_foo方法。